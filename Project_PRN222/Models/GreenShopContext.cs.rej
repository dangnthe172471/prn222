diff a/Project_PRN221/Models/GreenShopContext.cs b/Project_PRN221/Models/GreenShopContext.cs	(rejected hunks)
@@ -16,167 +16,26 @@
         {
         }
 
-        public virtual DbSet<Cart> Carts { get; set; } = null!;
-        public virtual DbSet<Category> Categories { get; set; } = null!;
-        public virtual DbSet<Comment> Comments { get; set; } = null!;
-        public virtual DbSet<Order> Orders { get; set; } = null!;
-        public virtual DbSet<OrderDetail> OrderDetails { get; set; } = null!;
-        public virtual DbSet<Product> Products { get; set; } = null!;
-        public virtual DbSet<Role> Roles { get; set; } = null!;
-        public virtual DbSet<ShipmentDetail> ShipmentDetails { get; set; } = null!;
-        public virtual DbSet<User> Users { get; set; } = null!;
+        public virtual DbSet<News> News { get; set; } = null!;
 
         protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
         {
-            var builder = new ConfigurationBuilder()
-                               .SetBasePath(Directory.GetCurrentDirectory())
-                               .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true);
-            IConfigurationRoot configuration = builder.Build();
-            optionsBuilder.UseSqlServer(configuration.GetConnectionString("GreenShop"));
-
+            if (!optionsBuilder.IsConfigured)
+            {
+#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
+                optionsBuilder.UseSqlServer("server=LAPTOP-RA8FO9RV\\SQLEXPRESS01;database=GreenShop;user=sa;password=123;TrustServerCertificate=true");
+            }
         }
 
         protected override void OnModelCreating(ModelBuilder modelBuilder)
         {
-            modelBuilder.Entity<Cart>(entity =>
+            modelBuilder.Entity<News>(entity =>
             {
-                entity.ToTable("Cart");
-
-                entity.HasIndex(e => e.ProductId, "IX_Cart_ProductId");
-
-                entity.HasIndex(e => e.UserId, "IX_Cart_UserId");
+                entity.HasIndex(e => e.UserId, "IX_News_UserId");
 
                 entity.Property(e => e.Id).ValueGeneratedNever();
 
-                entity.HasOne(d => d.Product)
-                    .WithMany(p => p.Carts)
-                    .HasForeignKey(d => d.ProductId)
-                    .OnDelete(DeleteBehavior.ClientSetNull);
-
-                entity.HasOne(d => d.User)
-                    .WithMany(p => p.Carts)
-                    .HasForeignKey(d => d.UserId)
-                    .OnDelete(DeleteBehavior.ClientSetNull);
-            });
-
-            modelBuilder.Entity<Category>(entity =>
-            {
-                entity.ToTable("Category");
-
-                entity.Property(e => e.Id).ValueGeneratedNever();
-            });
-
-            modelBuilder.Entity<Comment>(entity =>
-            {
-                entity.ToTable("Comment");
-
-                entity.HasIndex(e => e.ProductId, "IX_Comment_ProductId");
-
-                entity.HasIndex(e => e.UserId, "IX_Comment_UserId");
-
-                entity.Property(e => e.Id).ValueGeneratedNever();
-
-                entity.Property(e => e.CommentedAt).HasColumnName("Commented_At");
-
-                entity.HasOne(d => d.Product)
-                    .WithMany(p => p.Comments)
-                    .HasForeignKey(d => d.ProductId)
-                    .OnDelete(DeleteBehavior.ClientSetNull);
-
-                entity.HasOne(d => d.User)
-                    .WithMany(p => p.Comments)
-                    .HasForeignKey(d => d.UserId)
-                    .OnDelete(DeleteBehavior.ClientSetNull);
-            });
-
-            modelBuilder.Entity<Order>(entity =>
-            {
-                entity.ToTable("Order");
-
-                entity.HasIndex(e => e.ShipmentDetailsId, "IX_Order_ShipmentDetailsId");
-
-                entity.HasIndex(e => e.UserId, "IX_Order_UserId");
-
-                entity.Property(e => e.Id).ValueGeneratedNever();
-
-                entity.Property(e => e.CreateAt).HasColumnName("Create_at");
-
-                entity.HasOne(d => d.ShipmentDetails)
-                    .WithMany(p => p.Orders)
-                    .HasForeignKey(d => d.ShipmentDetailsId)
-                    .OnDelete(DeleteBehavior.ClientSetNull);
-
-                entity.HasOne(d => d.User)
-                    .WithMany(p => p.Orders)
-                    .HasForeignKey(d => d.UserId)
-                    .OnDelete(DeleteBehavior.ClientSetNull);
-            });
-
-            modelBuilder.Entity<OrderDetail>(entity =>
-            {
-                entity.ToTable("Order_Details");
-
-                entity.HasIndex(e => e.OrderId, "IX_Order_Details_OrderId");
-
-                entity.HasIndex(e => e.ProductId, "IX_Order_Details_ProductId");
-
-                entity.Property(e => e.Id).ValueGeneratedNever();
-
-                entity.HasOne(d => d.Order)
-                    .WithMany(p => p.OrderDetails)
-                    .HasForeignKey(d => d.OrderId)
-                    .OnDelete(DeleteBehavior.ClientSetNull);
-
-                entity.HasOne(d => d.Product)
-                    .WithMany(p => p.OrderDetails)
-                    .HasForeignKey(d => d.ProductId)
-                    .OnDelete(DeleteBehavior.ClientSetNull);
-            });
-
-            modelBuilder.Entity<Product>(entity =>
-            {
-                entity.ToTable("Product");
-
-                entity.Property(e => e.Id).ValueGeneratedNever();
-            });
-
-            modelBuilder.Entity<Role>(entity =>
-            {
-                entity.ToTable("Role");
-
-                entity.Property(e => e.Id).ValueGeneratedNever();
-            });
-
-            modelBuilder.Entity<ShipmentDetail>(entity =>
-            {
-                entity.HasIndex(e => e.UserId, "IX_ShipmentDetails_UserId");
-
-                entity.Property(e => e.Id).ValueGeneratedNever();
-
-                entity.Property(e => e.Receiver).HasColumnName("receiver");
-
-                entity.HasOne(d => d.User)
-                    .WithMany(p => p.ShipmentDetails)
-                    .HasForeignKey(d => d.UserId)
-                    .OnDelete(DeleteBehavior.ClientSetNull);
-            });
-
-            modelBuilder.Entity<User>(entity =>
-            {
-                entity.ToTable("User");
-
-                entity.HasIndex(e => e.RoleId, "IX_User_RoleId");
-
-                entity.Property(e => e.Id).ValueGeneratedNever();
-
-                entity.Property(e => e.CreateAt).HasColumnName("Create_at");
-
-                entity.Property(e => e.Dob).HasColumnName("DOB");
-
-                entity.HasOne(d => d.Role)
-                    .WithMany(p => p.Users)
-                    .HasForeignKey(d => d.RoleId)
-                    .OnDelete(DeleteBehavior.ClientSetNull);
+                entity.Property(e => e.CreatedAt).HasColumnName("Created_At");
             });
 
             OnModelCreatingPartial(modelBuilder);
